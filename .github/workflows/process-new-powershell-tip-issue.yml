name: process-new-powershell-tip-issue

# Trigger whenever a new issue is opened, and ensure (in the job) it has the automation label meaning we should process it.
on:
  issues:
    types: [opened, edited]

jobs:
  process-new-tip-issue:
    if: contains(github.event.issue.labels.*.name, 'automation-new-tip-issue-do-not-use')
    runs-on: windows-latest # Use Windows to ensure dotnet SDK is installed to build the assemblies.
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Comment on issue letting user know we are processing it
        shell: pwsh
        run: |
          [string] $runUrl = "$Env:GITHUB_SERVER_URL/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          [string] $message = @"
          Thank you for your submission! 🙏

          A pull request is being created for your tip via the following GitHub Actions workflow run and should be linked to this issue shortly... ⏱️

          $runUrl

          If the run fails due to a spelling mistake, or you want to update the tip information, you can edit the issue description to fix it up and it will automatically re-run the workflow and update the PR.
          "@

          Write-Output "Adding comment with link to workflow run to issue..."
          gh issue comment "${{ github.event.issue.number }}" --body $message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch for PR
        id: create-branch
        shell: pwsh
        run: |
          [string] $branchName = "new-tip/issue-${{ github.event.issue.number }}"

          Write-Output "Setting up git user information for automated workflow..."
          git config --global user.name 'GitHub Action - tiPS Automation'
          git config --global user.email 'tiPSAutomation@DoesNotExist.com'

          Write-Output "Creating and checking out new branch: $branchName"
          git checkout -b "$branchName"

          Write-Output "Fetching latest branch changes from remote branch if it exists, in case this was triggered from editing an issue. We will get an error when trying to push if we're not on the latest version of the branch..."
          git pull origin/$branchName $branchName 2>&1 # Convert errors to stdout since they are expected when the branch doesn't exist yet.

          Write-Output "Writing variables to environment variables for later steps..."
          "branch_name=$branchName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Extract tip information from issue and create new tip file
        id: create-tip-file
        shell: pwsh
        run: |
          Write-Output "Reading information from GitHub issue..."
          $body = @'
          ${{ github.event.issue.body }}
          '@

          Write-Output "Displaying issue body for troubleshooting purposes:"
          Write-Output "----------------------------------------"
          Write-Output $body
          Write-Output "----------------------------------------"

          Write-Output "Extracting information from issue body to local variables..."
          [string] $tipTitle = [string]::Empty
          [string] $tipText = [string]::Empty
          [string] $tipExample = [string]::Empty
          [string] $tipCategory = [string]::Empty
          [string[]] $tipUrls = @()
          [string] $tipAuthor = [string]::Empty
          [string] $tipExpiryDate = [string]::Empty
          [string] $gitHubCoAuthor = [string]::Empty

          # Extract the data from the markdown representation of the issue.
          # GitHub Forms generates structured markdown with specific section headers we can match against.
          # Below is a sample of what the body data may look like:
          #
          # ### Tip Title
          #
          # Testing title
          #
          # ### Tip Text
          #
          # Test description
          #
          # ### Example Code (optional)
          #
          # ```powershell
          # Example code
          # ```
          #
          # ### Category
          #
          # Syntax
          #
          # ### URL 1 (optional)
          #
          # https://example.com
          #
          # ### URL 2 (optional)
          #
          # https://anotherExample.com
          #
          # ### URL 3 (optional)
          #
          # _No response_
          #
          # ### Author (optional)
          #
          # Daniel Schroeder (deadlydog)
          #
          # ### Expiry Date (optional)
          #
          # _No response_
          #
          # ### Git Display Name and GitHub Email (optional)
          #
          # Daniel Schroeder <deadlydog@hotmail.com>

          # The default text that GitHub Issues uses for optional fields that are not filled in.
          [string] $noResponseText = '_No response_'

          # Extract Title.
          [regex] $titleRegex = '### Tip Title\s+(?<Title>.*?)\s+### Tip Text'
          if ($body -match $titleRegex) {
            $tipTitle = $Matches['Title'].Trim()

            # Trim title to 75 characters max.
            # Normally we would let the class validation logic handle this, but we want to do as much as possible
            # to ensure the PR creation doesn't fail, as this flow is only triggered on issue creation and we don't
            # want to force the user to create a whole new issue just to adjust the title length.
            if ($tipTitle.Length -gt 75) {
              $tipTitle = $tipTitle.Substring(0, 75)
            }

            Write-Output "Extracted Title: $tipTitle"
          }

          # Extract Tip Text. Use '(?s)' for multiline match mode, since these are multiline strings.
          [regex] $tipTextRegex = '(?s)### Tip Text\s+(?<TipText>.*?)\s+### Example Code'
          if ($body -match $tipTextRegex) {
            $tipText = $Matches['TipText'].Trim()
            Write-Output "Extracted Tip Text: $tipText"
          }

          # Extract Example Code. Use '(?s)' for multiline match mode, since these are multiline strings.
          [regex] $exampleRegex = '(?s)### Example Code \(optional\)\s+```powershell\s+(?<ExampleCode>.*?)```\s+### Category'
          if ($body -match $exampleRegex) {
            $tipExample = $Matches['ExampleCode'].Trim()
            Write-Output "Extracted Example Code: $tipExample"
          }

          # Extract Category.
          [regex] $categoryRegex = '### Category\s+(?<Category>.*?)\s+### URL 1'
          if ($body -match $categoryRegex) {
            $tipCategory = $Matches['Category'].Trim()
            Write-Output "Extracted Category: $tipCategory"
          }

          # Extract URLs (up to 3).
          [regex] $url1Regex = '### URL 1 \(optional\)\s+(?<Url1>.*?)\s+### URL 2'
          if ($body -match $url1Regex) {
            $url = $Matches['Url1'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              # Ensure URL starts with http(s)://.
              if (-not ($url.StartsWith('http://') -or $url.StartsWith('https://'))) {
                $url = "https://$url"
              }
              $tipUrls += $url
              Write-Output "Extracted URL 1: $url"
            }
          }

          [regex] $url2Regex = '### URL 2 \(optional\)\s+(?<Url2>.*?)\s+### URL 3'
          if ($body -match $url2Regex) {
            $url = $Matches['Url2'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              # Ensure URL starts with http(s)://.
              if (-not ($url.StartsWith('http://') -or $url.StartsWith('https://'))) {
                $url = "https://$url"
              }
              $tipUrls += $url
              Write-Output "Extracted URL 2: $url"
            }
          }

          [regex] $url3Regex = '### URL 3 \(optional\)\s+(?<Url3>.*?)\s+### Author'
          if ($body -match $url3Regex) {
            $url = $Matches['Url3'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              # Ensure URL starts with http(s)://.
              if (-not ($url.StartsWith('http://') -or $url.StartsWith('https://'))) {
                $url = "https://$url"
              }
              $tipUrls += $url
              Write-Output "Extracted URL 3: $url"
            }
          }

          # Extract Author.
          [regex] $authorRegex = '### Author \(optional\)\s+(?<Author>.*?)\s+### Expiry Date'
          if ($body -match $authorRegex) {
            $tipAuthor = $Matches['Author'].Trim()
            Write-Output "Extracted Author: $tipAuthor"
          }

          # Extract Expiry Date.
          [regex] $expiryDateRegex = '### Expiry Date \(optional\)\s+(?<ExpiryDate>.*?)\s+### Git Display Name and GitHub Email'
          if ($body -match $expiryDateRegex) {
            $tipExpiryDate = $Matches['ExpiryDate'].Trim()
            Write-Output "Extracted Expiry Date: $tipExpiryDate"
          }

          # Extract GitHub Co-Author.
          [regex] $gitHubCoAuthorRegex = '### Git Display Name and GitHub Email \(optional\)\s+(?<GitHubCoAuthor>.*?)$'
          if ($body -match $gitHubCoAuthorRegex) {
            $gitHubCoAuthor = $Matches['GitHubCoAuthor'].Trim()
            Write-Output "Extracted GitHub Co-Author: $gitHubCoAuthor"
          }

          Write-Output "Dot-sourcing utility script used to create the new tip file..."
          [string] $gitRootDirectoryPath = $Env:GITHUB_WORKSPACE
          . "$gitRootDirectoryPath/.github/workflows/ProcessNewPowerShellTipIssueFunctions.ps1"

          Write-Output "Calling function to create new tip file..."
          $newTipFileParameters = @{
            TipTitle = $tipTitle
            TipText = $tipText
            TipExample = $tipExample.Replace($noResponseText, '').Trim()
            TipUrls = $tipUrls
            TipCategory = $tipCategory.Replace($noResponseText, '').Trim()
            TipAuthor = $tipAuthor.Replace($noResponseText, '').Trim()
            TipExpiryDate = $tipExpiryDate
          }
          [string] $newTipFilePath = New-PowerShellTipFile @newTipFileParameters

          Write-Output "Writing variables to environment variables for later steps..."
          "tip_file_path=$newTipFilePath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tip_title=$tipTitle" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "github_coauthor=$gitHubCoAuthor" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Push changes and create PR
        id: create-pr
        shell: pwsh
        run: |
          [string] $coAuthorCommitMessage = [string]::Empty
          [string] $gitHubCoAuthor = '${{ steps.create-tip-file.outputs.github_coauthor }}'
          if ($gitHubCoAuthor -ne [string]::Empty) {
            $coAuthorCommitMessage = "-m ""Co-authored-by: $gitHubCoAuthor"""
            Write-Output "Adding co-author to commit message: $coAuthorCommitMessage"
          }

          Write-Output "Committing changes to local branch and pushing to remote..."
          git add "${{ steps.create-tip-file.outputs.tip_file_path }}"
          git commit -m "Add new tip: ${{ steps.create-tip-file.outputs.tip_title }}" $coAuthorCommitMessage
          git push --set-upstream origin "${{ steps.create-branch.outputs.branch_name }}"

          [string] $message = @"
          This PR adds the new PowerShell tip submitted via issue #${{ github.event.issue.number }}.

          Next steps are to wait for the PR checks to pass, and for the maintainer to review and merge this PR.

          Subscribe to this PR to receive notifications for any comments and to see when your tip has been merged into tiPS.

          🎉 Thank you for contributing to tiPS! 🎉

          This PR was created automatically using a GitHub Action to resolve #${{ github.event.issue.number }}.
          "@
          # Using "resolve #issue_number" in the PR message above will automatically close the issue when the PR is merged.
          # For more information see: https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword

          Write-Output "Creating pull request..."
          [string] $prUrl = gh pr create `
            --title "Tip: ${{ steps.create-tip-file.outputs.tip_title }}" `
            --body $message `
            --label "automation-new-tip-pr-do-not-use"

          Write-Output "Writing variables to environment variables for later steps..."
          "pr_url=$prUrl" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
        env:
          # Must use a user token instead of built-in GITHUB_TOKEN so that workflows will be triggered on the created PR.
          # For more information see: https://github.com/peter-evans/create-pull-request/issues/48
          GITHUB_TOKEN: ${{ secrets.TIPS_GITHUB_ACTIONS_PR_CREATION_TOKEN }}

      - name: Comment on issue with link to PR
        shell: pwsh
        run: |
          [string] $message = @"
          Thanks for contributing! 🙌

          A pull request has been created for your tip. You can view it at PR ${{ steps.create-pr.outputs.pr_url }}.

          Subscribe to the PR for notifications on any next steps and to see when your tip has been merged into tiPS.

          This issue will be automatically closed when the PR is merged or closed.
          "@

          Write-Output "Adding comment with link to PR to issue..."
          gh issue comment "${{ github.event.issue.number }}" --body $message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
