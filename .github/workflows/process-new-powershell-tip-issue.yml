name: Process New PowerShell Tip

on:
  issues:
    types: [opened, labeled]

jobs:
  process-new-tip:
    if: contains(github.event.issue.labels.*.name, 'automation-new-tip-do-not-use')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract tip information from issue
        id: extract-tip
        shell: pwsh
        run: |
          $issue = ConvertFrom-Json '${{ toJson(github.event.issue) }}'
          $body = $issue.body

          Write-Output "Displaying issue body for troubleshooting purposes:"
          Write-Output $body

          # Define the variables to extract the GitHub issue fields into.
          [string] $tipTitle = [string]::Empty
          [string] $tipText = [string]::Empty
          [string] $tipExample = [string]::Empty
          [string] $tipCategory = [string]::Empty
          [string[]] $tipUrls = @()
          [string] $tipAuthor = [string]::Empty
          [string] $tipExpiryDate = [string]::Empty

          # Extract the data from the markdown representation of the issue.
          # GitHub Forms generates structured markdown with specific section headers we can match against.
          # Below is a sample of what the body data may look like:
          # ### Tip Title (required)\n\nTest title\n\n### Tip Text (required)\n\nTest description\n\n### Example Code (optional)\n\n```powershell\nTest code\n```\n\n### URL 1 (optional)\n\nhttps://one.com\n\n### URL 2 (optional)\n\nhttp://two.com\n\n### URL 3 (optional)\n\n_No response_\n\n### Category (required)\n\nTerminal\n\n### Author (optional)\n\n_No response_\n\n### Expiry Date (optional)\n\n_No response_

          # The default text that GitHub Issues uses for optional fields that are not filled in.
          [string] $noResponseText = '_No response_'

          # Extract Title.
          [regex] $titleRegex = '### Tip Title \(required\)\\n\\n(?<Title>.*?)\\n\\n### Tip Text'
          if ($body -match $titleRegex) {
            $tipTitle = $Matches['Title'].Trim()
            Write-Output "Extracted Title: $tipTitle"
          }

          # Extract Tip Text.
          [regex] $tipTextRegex = '### Tip Text \(required\)\\n\\n(?<TipText>.*?)\\n\\n### Example Code'
          if ($body -match $tipTextRegex) {
            $tipText = $Matches['TipText'].Trim()
            Write-Output "Extracted Tip Text: $tipText"
          }

          # Extract Example Code.
          [regex] $exampleRegex = '### Example Code \(optional\)\\n\\n```powershell\\n(?<ExampleCode>.*?)```\\n\\n### URL 1'
          if ($body -match $exampleRegex) {
            $tipExample = $Matches['ExampleCode'].Trim()
            Write-Output "Extracted Example Code: $tipExample"
          }

          # Extract URLs (up to 3).
          [regex] $url1Regex = '### URL 1 \(optional\)\\n\\n(?<Url1>.*?)\\n\\n### URL 2'
          if ($body -match $url1Regex) {
            $url = $Matches['Url1'].Replace($noResponseText, '').Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 1: $url"
            }
          }

          [regex] $url2Regex = '### URL 2 \(optional\)\\n\\n(?<Url2>.*?)\\n\\n### URL 3'
          if ($body -match $url2Regex) {
            $url = $Matches['Url2'].Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 2: $url"
            }
          }

          [regex] $url3Regex = '### URL 3 \(optional\)\\n\\n(?<Url3>.*?)\\n\\n### Category'
          if ($body -match $url3Regex) {
            $url = $Matches['Url3'].Trim()
            if (-not [string]::IsNullOrWhiteSpace($url)) {
              $tipUrls += $url
              Write-Output "Extracted URL 3: $url"
            }
          }

          # Extract Category.
          [regex] $categoryRegex = '### Category \(required\)\\n\\n(?<Category>.*?)\\n\\n### Author'
          if ($body -match $categoryRegex) {
            $tipCategory = $Matches['Category'].Trim()
            Write-Output "Extracted Category: $tipCategory"
          }

          # Extract Author.
          [regex] $authorRegex = '### Author \(optional\)\\n\\n(?<Author>.*?)\\n\\n### Expiry Date'
          if ($body -match $authorRegex) {
            $tipAuthor = $Matches['Author'].Trim()
            Write-Output "Extracted Author: $tipAuthor"
          }

          # Set current date as CreatedDate.
          $tipCreatedDate = Get-Date -Format "yyyy-MM-dd"

          # Get the file contents to use by dot-sourcing the file with the function to call.
          [string] $gitRootDirectoryPath = $Env:GITHUB_WORKSPACE
          . "$gitRootDirectoryPath/.github/workflows/ProcessNewPowerShellTipIssueFunctions.ps1"
          $getFileContentsParameters = @{
            TipCreatedDate = $tipCreatedDate
            TipTitle = $tipTitle
            TipText = $tipText
            TipExample = $tipExample.Replace($noResponseText, '').Trim()
            TipUrls = $tipUrls
            TipCategory = $tipCategory.Replace($noResponseText, '').Trim()
            TipAuthor = $tipAuthor.Replace($noResponseText, '').Trim()
            TipExpiryDate = $tipExpiryDate
          }
          [string] $fileContent = New-PowerShellTipFileContents @getFileContentsParameters

          # Create branch name and filename.
          $branchName = "new-tip/issue-$($issue.number)"
          $fileName = "$tipCreatedDate-$($tipTitle.ToLower() -replace '[^a-z0-9]', '-' -replace '-+', '-').ps1"
          $filePath = "src/PowerShellTips/$fileName"

          # Output variables for next steps.
          "branch_name=$branchName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "file_name=$fileName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "file_path=$filePath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "file_content=$fileContent" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "issue_number=$($issue.number)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          "tip_title=$tipTitle" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Create branch
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git checkout -b "${{ steps.extract-tip.outputs.branch_name }}"
        shell: bash

      - name: Create tip file
        run: |
          # Ensure directory exists
          $directory = Split-Path -Parent "${{ steps.extract-tip.outputs.file_path }}"
          if (-not (Test-Path $directory)) {
            New-Item -ItemType Directory -Path $directory -Force
          }

          # Create the file
          Set-Content -Path "${{ steps.extract-tip.outputs.file_path }}" -Value "${{ steps.extract-tip.outputs.file_content }}"
        shell: pwsh

      - name: Push changes and create PR
        run: |
          git add "${{ steps.extract-tip.outputs.file_path }}"
          git commit -m "Add new PowerShell tip: ${{ steps.extract-tip.outputs.tip_title }}"
          git push --set-upstream origin "${{ steps.extract-tip.outputs.branch_name }}"

          # Create PR
          gh pr create \
            --title "New PowerShell Tip: ${{ steps.extract-tip.outputs.tip_title }}" \
            --body "This PR adds a new PowerShell tip submitted via issue #${{ steps.extract-tip.outputs.issue_number }}." \
            --label "enhancement" \
            --label "new-tip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Add comment to issue
        run: |
          gh issue comment "${{ steps.extract-tip.outputs.issue_number }}" --body "Thanks for your submission! I've created a pull request with your tip. You can view it here: ${{ github.server_url }}/${{ github.repository }}/pull/$(gh pr list --head ${{ steps.extract-tip.outputs.branch_name }} --json number --jq '.[0].number')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Close issue
        run: |
          gh issue close "${{ steps.extract-tip.outputs.issue_number }}" --comment "This issue has been processed and a pull request has been created with your tip."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
