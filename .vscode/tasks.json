{
	// For more info about out the tasks.json format see: https://code.visualstudio.com/docs/editor/tasks
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run all build tasks",
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"dependsOn": [
				"Run PSScriptAnalyzer linter",
				"Run CSpell spell checker",
				"Convert PowerShellTips files to JSON file"
			]
		},
		{
			"label": "Run all test tasks",
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"dependsOn": [
				"Run all Pester tests"
			]
		},
		{
			"label": "Run PSScriptAnalyzer linter",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "Invoke-ScriptAnalyzer -Path . -Recurse -EnableExit",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true,
				"group": "build"
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		},
		{
			"label": "Run CSpell spell checker",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			// If npx is not available, warn that Node.js is not installed. If we cannot run cspell, try to install and run it, and warn if we still cannot run it.
			"command": "try { & npx -v > $null } catch {}; if (-not $?) { Write-Warning 'Node.js is not installed, so cannot download and run npx cspell.' } else { try { & npx cspell . } catch {}; if (-not $?) { & npm install cspell; & npx cspell . }; if (-not $?) { Write-Warning 'There was a problem installing or running cspell' } }",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true,
				"group": "build"
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		},
		{
			"label": "Convert PowerShellTips files to JSON file",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./build/Convert-PowerShellTipFilesToJsonFile.ps1",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": false,
				"group": "build"
			},
			"dependsOn": [
				"Ensure PowerShellTips filenames match their ID"
			]
		},
		{
			"label": "Ensure PowerShellTips filenames match their ID",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./tools/Rename-PowerShellTipFilesToMatchTheirId.ps1",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": false,
				"group": "build"
			},
			"dependsOn": [
				"Build C# assembly and copy to PowerShell module directory"
			]
		},
		{
			"label": "Build C# assembly and copy to PowerShell module directory",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./build/Build-CSharpAssemblies.ps1 -Force",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true,
				"group": "build"
			}
		},
		{
			"label": "Run all Pester tests",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./build/Build-CSharpAssemblies.ps1; Invoke-Pester -Configuration (New-PesterConfiguration @{ Output = @{ Verbosity = 'Detailed' }})",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		},
		{
			"label": "Run Pester code coverage",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./build/Build-CSharpAssemblies.ps1; Invoke-Pester -Configuration (New-PesterConfiguration @{ Output = @{ Verbosity = 'Detailed' }; CodeCoverage = @{ Enabled = $true }})",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		},
		{
			"label": "Test module manifest validity",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "Test-ModuleManifest -Path ./src/tiPS/tiPS.psd1",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		},
		{
			"label": "Add new PowerShell tip",
			"type": "shell",
			"options": {
				"shell": {
					"executable": "pwsh",
					"args": [
						"-NoProfile",
						"-Command"
					]
				}
			},
			"command": "./tools/New-PowerShellTip.ps1",
			"group": "none",
			"presentation": {
				"reveal": "always"
			},
			"problemMatcher": [
				"$func-powershell-watch"
			]
		}
	]
}
